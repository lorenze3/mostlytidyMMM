% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/step_saturation.R
\name{step_adstock}
\alias{step_adstock}
\title{function to add saturation trasnformations to a recipe}
\usage{
step_adstock(
  recipe,
  ...,
  role = NA,
  trained = FALSE,
  options = list(names = TRUE),
  skip = FALSE,
  retention = 0.5,
  groups = c("prod", "store"),
  time_id = "week",
  adstocks = NULL,
  id = rand_id("adstock")
)
}
\arguments{
\item{recipe}{a recipes::recipe}

\item{...}{variables in recipe to be effected by the step}

\item{role}{defaults to NA, set to a string to change the role of the transformed variables}

\item{retention}{defaults to .5, the amount of impact retained from the previous time period}

\item{id}{default value will work most often, but can be set manually for use with tuning fuctions}
}
\value{
a recipe with the new adstock step appended
}
\description{
function to add saturation trasnformations to a recipe
}
\examples{

suppressMessages(suppressWarnings(library(tidyverse)))
suppressMessages(suppressWarnings(library(recipes)))
suppressMessages(suppressWarnings(library(tune)))
suppressMessages(suppressWarnings(library(dials)))
suppressMessages(suppressWarnings(library(mostlytidyMMM)))
#create two datasets:
mktdata<-rbind(tibble(prod='brand',store='store1',
                      sales=c(100.,100.,100.,100.,100.),
                      tv=c(10.,100.,0.,0.,100),
                      search=c(0,10,20,50.,50.),
                      week=c(1,2,3,4,5)) ,
               tibble(prod='brand',store='store2',
                      sales=c(10.,10,10,10,10),tv=c(0.,0,0,0,0),
                      search=c(0.,2,2,0,0) ,
                      week=c(1,2,3,4,5)) ) |> 
  group_by(prod,store)

mktdata2<-tibble(prod='brand',store='all',sales=100,tv=1000,search=1000,week=6) |> group_by(prod,store)

#build a recipe with two different adstock steps -- could be done in one step
rec_obj <-  recipe(sales ~ ., data = mktdata) |> step_adstock(tv,retention=.5,groups=c('prod','store')) |>
  step_adstock(search,retention=.5,groups=c('prod','store'),time_id='week') |>
  prep(training = mktdata)

#showing off the custom print function
print(rec_obj)

#see the final transformed output
bake(rec_obj,mktdata)

#note what happens to store = 'all' in mktdata2:
bake(rec_obj,mktdata2)

#check to make sure that per-variable application of the step_adstock and step-saturation do not break the grouping structure even though
#the output tibble from bake is ungrouped (irritatingly)

rec_both_steps<-recipe(sales~.,data=mktdata) |> 
  step_adstock(tv,retention=.1) |> step_saturation(tv,asymptote=1000,saturation_speed=.001) |>
  step_adstock(search,retention=.1,time_id='week')  |> prep()


bake(rec_both_steps,mktdata)

#And adstock steps throw an error if time series isn't regular -- last point is two weeks 
mktdata3<-rbind(tibble(prod='brand',store='store1',
                      sales=c(100.,100.,100.,100.,100.),
                      tv=c(10.,100.,0.,0.,100),
                      search=c(0,10,20,50.,50.),
                      week=c(1,2,3,4,6)) ,
               tibble(prod='brand',store='store2',
                      sales=c(10.,10,10,10,10),tv=c(0.,0,0,0,0),
                      search=c(0.,2,2,0,0) ,
                      week=c(1,2,3,4,6)) ) |> 
  group_by(prod,store)

#not run to allow vignette to knit -- uncomment to see error

# rec1<-recipe(mktdata3) |> step_adstock(search,retention=.1,groups=c('prod','store'),
#                                         time_id='week')|>prep()

#bake(rec1,mktdata3)
}
